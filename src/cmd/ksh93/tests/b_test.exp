# vim: set filetype=expect:
#
# Test for test builtin
set pid [spawn $ksh]
expect_prompt
# Terminal rows and columns may default to zero so ensure sane values.
send "stty rows 24 cols 80\r"
expect_prompt

# ==========
# Very basic tests of `test -t`.
log_test_entry
send "test -t 0 && echo PASS || echo FAILED\r"
expect "\r\nPASS\r\n" {
    puts "stdin is a terminal device"
}
expect_prompt

log_test_entry
send "test -t 1 && echo PASS || echo FAILED\r"
expect "\r\nPASS\r\n" {
    puts "stdout is a terminal device"
}
expect_prompt

log_test_entry
send "test -t && echo PASS || echo FAILED\r"
expect "\r\nPASS\r\n" {
    puts "implicit stdout is a terminal device"
}
expect_prompt

log_test_entry
send "test -t 1 > /dev/null && echo FAILED || echo PASS\r"
expect "\r\nPASS\r\n" {
    puts "stdout is not a terminal device"
}
expect_prompt

log_test_entry
send "test -t > /dev/null && echo FAILED || echo PASS\r"
expect "\r\nPASS\r\n" {
    puts "implicit stdout is not a terminal device"
}
expect_prompt

# ==========
# `test -t` as one of two or more conditions works.
log_test_entry
send "test -t 0 -a -t 1 -a -t 2 && echo PASS || echo FAILED\r"
expect "\r\nPASS\r\n" {
    puts "test -t true in complex expression"
}
expect_prompt

log_test_entry
send "test -t 0 -a -t 123 && echo PASS || echo FAILED\r"
expect "\r\nFAILED\r\n" {
    puts "test -t false in complex expression"
}
expect_prompt

# ==========
# Verify that constructs like `[ -t 1 ]` behave sensibly even inside a command substitution.

# This is the simple case that doesn't do any redirection of stdout within the command
# substitution. Thus the [ -t 1 ] test should be false.
send {v=$(echo begin; [ -t 1 ] && echo -t1 is true; echo end); echo "v=:$v:"}
send "\r"
expect "\r\nv=:begin\r\nend:\r\n" {
    puts "-t1 in comsub works correctly"
}
expect_prompt

# This is the more complex case that does redirect stdout within the command substitution to the
# actual tty. Thus the [ -t 1 ] test should be true.
send {v=$(echo begin; exec >/dev/tty; [ -t 1 ] && echo -t1 is true; echo end); echo "v=:$v:"}
send "\r"
expect "\r\n-t1 is true\r\nend\r\nv=:begin:\r\n" {
    puts "-t1 in comsub with exec >/dev/tty works correctly"
}
expect_prompt

# ==========
# Very basic tests of `test -c`. See also the b_test.sh unit test for other `test -c` tests.
log_test_entry
send "test -c /dev/stdout && echo PASS || echo FAILED\r"
expect "\r\nPASS\r\n" {
    puts "stdout is a char device"
}
expect_prompt

# ==========
# Exit shell with ctrl-d
log_test_entry
send [ctrl D]
catch {expect default exp_continue} output
log_debug "EOF output: $output"

catch {wait}
exit 0
