# Test for test builtin
set pid [spawn $ksh]
expect_prompt

# ==========
log_test_entry
send "test -t 1 && echo PASS || echo FAILED\r"
expect "\r\nPASS\r\n" {
    puts "stdin is a terminal device"
}
expect_prompt

# ==========
# `test -t` without argument should check for stdout
log_test_entry
send "test -t && echo PASS || echo FAILED\r"
expect "\r\nPASS\r\n" {
    puts "stdout is a terminal device"
}
expect_prompt

# ==========
# Verify that constructs like `[ -t 1 ]` behave sensibly even inside a command substitution.

# This is the simple case that doesn't do any redirection of stdout within the command
# substitution. Thus the [ -t 1 ] test should be false.
send {v=$(echo begin; [ -t 1 ] && echo -t1 is true; echo end); echo "v=:$v:"}
send "\r"
expect "\r\nv=:begin\r\nend:\r\n" {
    puts "-t1 in comsub works correctly"
}
expect_prompt

# This is the more complex case that does redirect stdout within the command substitution to the
# actual tty. Thus the [ -t 1 ] test should be true.
send {v=$(echo begin; exec >/dev/tty; [ -t 1 ] && echo -t1 is true; echo end); echo "v=:$v:"}
send "\r"
expect "\r\n-t1 is true\r\nend\r\nv=:begin:\r\n" {
    puts "-t1 in comsub with exec >/dev/tty works correctly"
}
expect_prompt

# ==========
# Exit shell with ctrl-d
log_test_entry
send [ctrl D]
catch {expect default exp_continue} output
log_debug "EOF output: $output"

catch {wait}
exit 0
