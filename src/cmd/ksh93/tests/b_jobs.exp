# vim: set filetype=expect:
#
# Interactive tests for jobs, bg, fg, disown, and related builtins.
#
# Note the `-l` arg to force an interactive login shell. Most of the expect based unit tests don't
# bother with that flag since they only need an interactive shell. This unit test however is
# different because some tests (e.g., of the `disown` command) only work in a login shell.
set pid [spawn $ksh -l]
expect_prompt
# Terminal rows and columns may default to zero so ensure sane values.
send "stty rows 24 cols 80\r"
expect_prompt

# ======
# Get the current stty values to aid debugging failures. This is also necessary so the [ctrl-Z] test
# below works reliably on BSD systems (e.g., macOS). That fact may indicate a bug in this project
# but it's just as likely to be a BSD/GNU/SysV/other difference in behavior.
log_test_entry
send "stty -a\r"
expect_prompt

# ======
# An invalid `disown` job ID should be an error.
log_test_entry
send "disown 666\r"
expect -re ": disown: no such job\r\n" {
    puts "disown invalid job ID fails"
}
expect_prompt

# ======
# An invalid `bg` job ID should be an error.
log_test_entry
send "bg %9\r"
expect -re ": bg: no such job\r\n" {
    puts "bg invalid job ID fails"
}
expect_prompt

# ======
# An invalid `fg` job ID should be an error.
log_test_entry
send "fg %9\r"
expect -re ": fg: no such job\r\n" {
    puts "fg invalid job ID fails"
}
expect_prompt

# ======
# Put a job in the background and verify that not disowning it causes the job to be killed when
# the shell terminates.
log_test_entry
# See https://github.com/att/ast/issues/1377 for why this test is commented out.
# TODO: enable this test when that issue is fixed.
puts "background job killed when shell exits"
#send "$ksh -l\r"
## We can't use `expect_prompt` here because the subshell will reset the prompt counter to one.
#expect -re "\r\nKSH PROMPT:1:"
#send "\$(type -p sleep) 17 &\r"
#expect -re "\r\nKSH PROMPT:2:"
#send "ps waux | grep '\[s\]leep 17'\r"
#expect -re "\r\nKSH PROMPT:3:"
#send "echo status $?\r"
#expect -re "\r\nKSH PROMPT:4:"
#send "set -o\r"
#expect -re "\r\nKSH PROMPT:5:"
#send "exit\r"
#expect_prompt
#send "ps waux | grep '\[s\]leep 17'\r"
#expect_prompt
#send "echo status $?\r"
#expect -re "\r\nstatus 1\r\n" {
#    puts "background job killed when shell exits"
#}
#expect_prompt

# ======
# Put a job in the background and verify that disowning it causes the job to continue running when
# the shell terminates.
log_test_entry
send "$ksh -l\r"
# We can't use `expect_prompt` here because the subshell will reset the prompt counter to one.
expect -re "\r\nKSH PROMPT:1:"
send "\$(type -p sleep) 17 &\r"
expect -re "\r\nKSH PROMPT:2:"
send "disown %1\r"
expect -re "\r\nKSH PROMPT:3:"
send "ps waux | grep '\[s\]leep 17'\r"
expect -re "\r\nKSH PROMPT:4:"
send "echo status $?\r"
expect -re "\r\nKSH PROMPT:5:"
send "exit\r"
expect_prompt
send "ps waux | grep '\[s\]leep 17'\r"
expect_prompt
send "echo status $?\r"
expect -re "\r\nstatus 0\r\n" {
    puts "disowned background job not killed when shell exits"
}
expect_prompt
# Kill the backgrounded, and orphaned, sleep.
send "ps waux | grep '\[s\]leep 17' | read user pid x; kill $pid\r"
expect_prompt

# ======
# Ctrl-Z should stop current process
log_test_entry
send "\$(type -p sleep) 60\r"
sleep 0.1
send [ctrl Z]
expect -re ".*Stopped.*.\\(type -p sleep\\) 60\r\n" {
    puts "Ctrl-z stops sleep 60 processs"
}
expect_prompt

# ======
# Test if jobs builtin lists stopped process
log_test_entry
send "jobs\r"
expect -re ".*Stopped.*.\\(type -p sleep\\) 60\r\n" {
    puts "jobs lists stopped sleep 60 process"
}
expect_prompt

# ======
# Test if jobs builtin lists pid of stopped process
log_test_entry
send "jobs -l\r"
expect -re "\[1\].*\[0-9\]+.*Stopped.*.\\(type -p sleep\\) 60\r\n" {
    puts "jobs -l lists pid of stopped sleep 60 process"
}
expect_prompt

# ======
# Test if jobs builtin lists process groups of stopped process
log_test_entry
send "jobs -p\r"
expect -re "\[0-9\]+\r\n" {
    puts "jobs -p lists process group of stopped sleep 60 process"
}
expect_prompt

# ======
# bg should put last stopped process in background
log_test_entry
send "bg\r"
expect -re ".*..type -p sleep. 60&\r\n"
expect_prompt

send "jobs\r"
expect -re ".*Running.*.\\(type -p sleep\\) 60\r\n" {
    puts "bg brings last stopped process to background"
}
expect_prompt

# ======
# fg should bring the last stopped process to the foreground
log_test_entry
send "fg\r"
expect -re "\r\n.\\(type -p sleep\\) 60\r\n"

# ======
# Killing the job should get a new prompt.
log_test_entry
send [ctrl C]
expect_prompt

# ======
# Disable job monitoring.
#log_test_entry
#send "set +o monitor\r"
#expect_prompt

# ======
# There should be a warning if shell attempts exit with stopped processes.
#
# The signal delivery timing (especially on platforms like Windows Subsystem for Linux, WSL) might
# result in the next prompt being issued before the "Stopped" message and a second prompt being
# displayed. So we might need to increment the prompt counter.
#log_test_entry
#send "\$(type -p sleep) 60\r"
#sleep 0.1
#send [ctrl Z]
#expect -re ".*Stopped.*.\\(type -p sleep\\) 60\r\n"
#if {[string match "\r\nKSH PROMPT:*" $expect_out(buffer)]} {
#    incr prompt_counter
#}
#expect_prompt

# ======
# Verify we can't fg that job again with job monitoring disabled.
#send "fg\r"
#expect -re ": fg: No job control\r\n"
#expect_prompt

# ======
# Try to exit shell.
#log_test_entry
#send [ctrl D]
#expect -re ".*You have stopped jobs\r\n" {
#    puts "Warning before exit for stopped jobs works"
     puts "Warning before exit for stopped jobs works"
#}
#expect_prompt

# ======
# Enable job monitoring, fg and kill the stopped job. This shouldn't be necessary but not doing this
# causes the test to timeout on WSL (Windows Subsystem for Linux).
#log_test_entry
#send "set -o monitor\r"
#expect_prompt
#send "fg\r"
#expect -re ".*.\\(type -p sleep\\) 60\r\n"
#send [ctrl C]
#expect_prompt

# ======
# This should exit the shell but we don't actually verify this happens other than via the test
# not timing out.
log_test_entry
send [ctrl D]
catch {expect default exp_continue} output
log_debug "EOF output: $output"
catch {wait}
exit 0
