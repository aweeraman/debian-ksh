# Interactive tests for hist builtin
set pid [spawn $ksh]
expect_prompt

# ==========
# hist -l lists commands on standard output
log_test_entry
send "hist -l\r"

expect -re "hist -l\r\n8(\t| +)cd foo2\r\n9(\t| +)cd ..\r\n10(\t| +)mkdir foo3\r\n11(\t| +)cd foo3\r\n12(\t| +)cd ..\r\n13(\t| +)echo hello world\r\n14(\t| +)echo hello world1 > foo\r\n15(\t| +)echo hello world2 >> foo\r\n16(\t| +)echo hello world3 >> foo\r\n17(\t| +)echo hello world1 > bar\r\n18(\t| +)echo hello world2 >> bar\r\n19(\t| +)echo hello world3 >> bar\r\n20(\t| +)echo hello world1 > baz\r\n21(\t| +)echo hello world2 >> baz\r\n22(\t| +)echo hello world3 >> baz\r\n23(\t| +)hist -l\r\n" {
    puts "hist -l lists commands on standard output"
}

expect_prompt

# ==========
# hist -lr lists commands on standard output in reverse order
log_test_entry
send "hist -lr\r"

expect -re "hist -lr\r\n24(\t| +)hist -lr\r\n23(\t| +)hist -l\r\n22(\t| +)echo hello world3 >> baz\r\n21(\t| +)echo hello world2 >> baz\r\n20(\t| +)echo hello world1 > baz\r\n19(\t| +)echo hello world3 >> bar\r\n18(\t| +)echo hello world2 >> bar\r\n17(\t| +)echo hello world1 > bar\r\n16(\t| +)echo hello world3 >> foo\r\n15(\t| +)echo hello world2 >> foo\r\n14(\t| +)echo hello world1 > foo\r\n13(\t| +)echo hello world\r\n12(\t| +)cd ..\r\n11(\t| +)cd foo3\r\n10(\t| +)mkdir foo3\r\n9(\t| +)cd ..\r\n" {
    puts "hist -lr lists commands on standard output in reverse order"
}

expect_prompt

# ==========
# hist -ln skips command numbers while listing commands
log_test_entry
send "hist -ln\r"

expect -re "hist -ln\r\n(\t| +)mkdir foo3\r\n(\t| +)cd foo3\r\n(\t| +)cd ..\r\n(\t| +)echo hello world\r\n(\t| +)echo hello world1 > foo\r\n(\t| +)echo hello world2 >> foo\r\n(\t| +)echo hello world3 >> foo\r\n(\t| +)echo hello world1 > bar\r\n(\t| +)echo hello world2 >> bar\r\n(\t| +)echo hello world3 >> bar\r\n(\t| +)echo hello world1 > baz\r\n(\t| +)echo hello world2 >> baz\r\n(\t| +)echo hello world3 >> baz\r\n(\t| +)hist -l\r\n(\t| +)hist -lr\r\n(\t| +)hist -ln\r\n" {
    puts "hist -ln skips command numbers while listing commands"
}

expect_prompt

# ==========
# hist -s old=new replaces text 'old' with 'new' in command
log_test_entry
send "hist -s hello=bye 13\r"
expect -re "bye world\r\n" {
    puts "hist -s old=new replaces text 'old' with 'new' in command"
}
expect_prompt

# ==========
# `hist echo` finds last echo command
log_test_entry
send "hist echo\r"
# Give `ed` time to start then quit it which will cause the last echo command to be run.
sleep 0.1
send "q\r"
expect -re "bye world\r\n" {
    puts "hist echo finds last echo command"
}
expect_prompt

# ==========
# hist -N starts N commands back
# This test also checks for negative indexes.
log_test_entry
send "hist -N 1\r"
sleep 0.5
send "Q\r"
expect -re "bye world\r\n" {
    puts "hist -N starts N commands back"
}
expect_prompt

# ==========
# hist command triggers ed editor.
# This test also checks for negative indexes.
log_test_entry
send "hist -1\r"
sleep 0.5
send "Q\r"
expect -re "bye world\r\n" {
    puts "hist command triggers ed editor"
}
expect_prompt

# ==========
# hist -p writes history expansion on standard output
log_test_entry
send "hist -p '!!'\r"
expect -re "echo bye world\r\n" {
    puts "hist -p writes history expansion on standard output"
}
expect_prompt

# ==========
# hist -e vi triggers vi editor
log_test_entry
send "hist -e vi 13\r"
sleep 0.5
send ":q!\r"
expect -re "hello world\r\n" {
    puts "hist -e vi triggers vi editor"
}
expect_prompt

# ==========
# HISTEDIT=vi triggers vi editor
log_test_entry
send "HISTEDIT=vi hist 13\r"
sleep 0.5
send ":q!\r"
expect -re "hello world\r\n" {
    puts "HISTEDIT=vi triggers vi editor"
}
expect_prompt

# ==========
# When both HISTEDIT and FCEDIT are set, HISTEDIT should take priority
log_test_entry
send "HISTEDIT=vi FCEDIT=ed hist 13\r"
sleep 0.5
send ":q!\r"
expect -re "hello world\r\n" {
    puts "When both HISTEDIT and FCEDIT are set, HISTEDIT takes priority"
}
expect_prompt

# ==========
# Verify that asking the shell to exit works.
log_test_entry
send "exit\r"
catch {expect default exp_continue} output
catch {wait}
