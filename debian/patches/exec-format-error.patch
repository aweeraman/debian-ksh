Description: Fix race conditions running external commands with job control on
 When ksh is compiled with SHOPT_SPAWN (the default), which uses
 posix_spawn(3) or vfork(2) (via sh_ntfork()) to launch external
 commands, at least two race conditions occur when launching
 external commands while job control is active. See:
 https://bugs.launchpad.net/ubuntu/+source/ksh/+bug/1887863/comments/3
 https://www.mail-archive.com/ast-developers@research.att.com/msg00717.html
 The basic issue is that this performance optimisation is
 incompatible with job control, because it uses a spawning mechanism
 that doesn't copy the parent process' memory pages into the child
 process, therefore no state that involves memory can be set before
 exec-ing the external program. This makes it impossible to
 correctly set the terminal's process group ID in the child process,
 something that is essential for job control to work.
Author: Martijn Dekker <martijn@inlv.org>
Date: 2020-07-22
Origin: https://github.com/ksh93/ksh/commit/f207cd57879ea248f33d84ad9018577b53de3a5a
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=965072
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/ksh/+bug/1887863/comments/3
Forwarded: not-needed

--- a/src/cmd/ksh93/sh/xec.c
+++ b/src/cmd/ksh93/sh/xec.c
@@ -1682,7 +1682,7 @@ int sh_exec(register const Shnode_t *t, int flags)
 #else
 #if SHOPT_SPAWN
 #   ifdef _lib_fork
-				if(com)
+				if(com && !job.jobcontrol)
 					parent = sh_ntfork(shp,t,com,&jobid,ntflag);
 				else
 					parent = sh_fork(shp,type,&jobid);
@@ -3742,6 +3742,7 @@ static void sigreset(Shell_t *shp,int mode)
 
 /*
  * A combined fork/exec for systems with slow or non-existent fork()
+ * Note: Incompatible with job control.
  */
 static pid_t sh_ntfork(Shell_t *shp,const Shnode_t *t,char *argv[],int *jobid,int flag)
 {
--- a/src/cmd/ksh93/tests/basic.sh
+++ b/src/cmd/ksh93/tests/basic.sh
@@ -514,4 +514,21 @@ $SHELL -xc '$(LD_LIBRARY_PATH=$LD_LIBRARY_PATH exec $SHELL -c :)' > /dev/null 2>
 
 $SHELL 2> /dev/null -c $'for i;\ndo :;done' || err_exit 'for i ; <newline> not vaid'
 
+# ======
+# Test for bug in ksh binaries that use posix_spawn() while job control is active.
+# See discussion at: https://github.com/ksh93/ksh/issues/79
+if	test -t 1 2>/dev/null 1>/dev/tty	# this test only works if we have a tty
+then	actual=$(
+		"$SHELL" -i <<-\EOF 2>/dev/tty
+		printf '%s\n' 1 2 3 4 5 | while read
+		do	ls /dev/null
+		done 2>&1
+		exit  # suppress extra newline
+		EOF
+	)
+	expect=$'/dev/null\n/dev/null\n/dev/null\n/dev/null\n/dev/null'
+	[[ $actual == "$expect" ]] || err_exit 'Race condition while launching external commands' \
+		"(expected $(printf %q "$expect"), got $(printf %q "$actual"))"
+fi
+
 exit $((Errors<125?Errors:125))
